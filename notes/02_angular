-----------------------------------------------------------
CHAPTER 2 - HELLO ANGULAR
-----------------------------------------------------------

- Starting a New Project

    # Start new project with default options
    $ ng new stock-market



- Understanding the Angular CLI

    - Running the Application

        # Run the server in development mode on port 4200
        $ ng serve

        ** NG Live Development Server is listening on localhost:4200,
           open your browser on http://localhost:4200/ **
        Date: 2018-03-26T10:09:18.869Z
        Hash: 0b730a52f97909e2d43a
        Time: 11086ms
        chunk {inline} inline.bundle.js (inline) 3.85 kB [entry] [rendered]
        chunk {main} main.bundle.js (main) 17.9 kB [initial] [rendered]
        chunk {polyfills} polyfills.bundle.js (polyfills) 549 kB [initial] [rendered]
        chunk {styles} styles.bundle.js (styles) 41.5 kB [initial] [rendered]
        chunk {vendor} vendor.bundle.js (vendor) 7.42 MB [initial] [rendered]
        
        webpack: Compiled successfully.



    - We can see that the files needed to serve the application were created:

        inline.bundle.js
          Tiny file with webpack utilities and loaders that is needed for 
            bootstrapping the application.

        main.bundle.js
          The transpiled code that is specific to your application.

        polyfills.bundle.js
          Includes all the polyfills needed for supporting some capabilities in 
            older browsers (like advanced ECMAScript features not yet available 
            in all browsers).

        styles.bundle.js
          Compilation of all the CSS styles that are needed for your application.

        vendor.bundle.js
          Includes all the third-party libraries and frameworks you depend on 
            (including Angular).



- Basics of an Angular Application

    - Here is the structure of the new project:

        stock-market
        +----e2e                                # End-to-end tests
        +----src
             +----app
                  +----app.component.css
                  +----app.component.html
                  +----app.component.spec.ts
                  +----app.component.ts         # Root component
                  +----app.module.ts            # Main module
             +----assets
             +----environments
             +----index.html                    # Root html
             +----main.ts                       # Entry point
         +----.angular-cli.json                 # Angular CLI config



    - Root HTML - index.html

        - Notice that the root component is sparse:

            # src/index.html

            <!doctype html>
            <html lang="en">
            <head>
              <meta charset="utf-8">
              <title>StockMarket</title>
              <base href="/">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <link rel="icon" type="image/x-icon" href="favicon.ico">
            </head>
            <body>
              <app-root></app-root>          # Root component
            </body>
            </html>



    - The Entry Point - main.ts

        - While the index.html file is responsible for deciding which files are 
            to be loaded, the main.ts file  identifies which Angular module is to 
            be loaded when the application starts.

          # src/main.ts

          import { enableProdMode } from '@angular/core';
          import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
          
          import { AppModule } from './app/app.module';
          import { environment } from './environments/environment';
          
          if (environment.production) {
            enableProdMode();
          }
          
          platformBrowserDynamic().bootstrapModule(AppModule)   # Bootstrap the main AppModule
            .catch(err => console.log(err));



    - MainModule - app.module.ts

        - This is where your application-specific source code starts from. The 
            application module file can be thought of as the core configuration 
            of your application, from loading all the relevant and necessary 
            dependencies, declaring which components will be used within your 
            application, to marking which is the main entry point component of 
            your application.


        # src/app/app.module.ts

        import { BrowserModule } from '@angular/platform-browser';
        import { NgModule } from '@angular/core';
        import { AppComponent } from './app.component';
        
        @NgModule({                            1
          declarations: [
            AppComponent                       2
          ],
          imports: [                           3
            BrowserModule
          ],
          providers: [],
          bootstrap: [AppComponent]            4
        })
        export class AppModule { }


        1 NgModule TypeScript annotation to mark this class definition as an 
            Angular module

        2 Declarations marking out which components and directives can be used 
            within the application

        3 Importing other modules that provide functionality needed in the application

        4 The entry point component for starting the application



    - Root Component - AppComponent

        - Here is the code for our only component, the 'AppComponent':

            # src/app/app.component.ts

            import { Component } from '@angular/core';

            @Component({
              selector: 'app-root',
              templateUrl: './app.component.html',
              styleUrls: ['./app.component.css']
            })

            export class AppComponent {
              title = 'app';
            }



- Creating a Component

    - First, we will create a stock widget, which displays the name of the stock, 
        its stock code, the current price, and whether it has changed for the 
        positive or negative.

        # Create new component 'stock-item' in folder 'stock'
        $ ng generate component stock/stock-item


    - The command will generate all the relevant files for a new component, including:

        stock-item.component.ts
          The component definition

        stock-item.component.html
          The corresponding template definition

        stock-item.component.css        
          The styles for the component

        stock-item.component.spec.ts
          The skeleton unit tests for the component


    - Here is the updated AppModule with our new component added:

        # src/app/app.module.ts

        ...
        import { AppComponent } from './app.component';
        import { StockItemComponent } from './stock/stock-item/stock-item.component';

        @NgModule({
          declarations: [
            AppComponent,
            StockItemComponent
          ],
          ...



- Using Our New Component

    - Here is the generated stock-item.component.ts file:

        # src/app/stock/stock-item.component.ts

        import { Component, OnInit } from '@angular/core';
        
        @Component({
          selector: 'app-stock-item',
          templateUrl: './stock-item.component.html',
          styleUrls: ['./stock-item.component.css']
        })

        export class StockItemComponent implements OnInit {
          constructor() { }
          ngOnInit() { }
        }


    - To use this component in our application, we can simply create an element that 
        matches the selector defined anywhere inside our main app component. 

        # src/app/app.component.html

        <div style="text-align:center">
          <h1>
            Welcome to {{ title }}!
          </h1>
          <app-stock-item></app-stock-item>
        </div>



- Understanding Data Binding
- Understanding Property Binding
- Understanding Event Binding
- Using Models for Cleaner Code